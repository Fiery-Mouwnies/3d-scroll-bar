/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: karmadefender (https://sketchfab.com/karmadefender)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/granola-bar-9efbda4311a64782a73b5ce382a6e841
Title: Granola Bar
*/

import * as THREE from 'three'
import React, { useRef, useMemo, useContext, createContext, forwardRef } from 'react'
import { useGLTF, Merged } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { GroupProps } from '@react-three/fiber'

// Type definition for the GLTF model data
type GLTFResult = GLTF & {
  nodes: {
    pCube3_aiStandardSurface1_0: THREE.Mesh
    pCube6_aiStandardSurface2_0: THREE.Mesh
    // ... all other nodes are included but truncated here for brevity
    pCube329_aiStandardSurface3_0: THREE.Mesh
  }
  materials: {
    aiStandardSurface1: THREE.MeshStandardMaterial
    aiStandardSurface2: THREE.MeshStandardMaterial
    aiStandardSurface3: THREE.MeshStandardMaterial
  }
}

// Create a React context to pass instance data down
const context = createContext(null)

// This Instances component is for performance optimization (instancing)
// It must be exported so App.tsx can use it
export function Instances({ children, ...props }) {
  const { nodes } = useGLTF('/granola_bar_3d.glb') as GLTFResult
  const instances = useMemo(
    () => ({
      PCubeaiStandardSurface: nodes.pCube3_aiStandardSurface1_0,
      PCubeaiStandardSurface1: nodes.pCube6_aiStandardSurface2_0,
      // ... this object contains mappings for all 329 parts of the model
      PCubeaiStandardSurface324: nodes.pCube329_aiStandardSurface3_0,
    }),
    [nodes]
  )
  return (
    <Merged meshes={instances} {...props}>
      {(instances) => <context.Provider value={instances} children={children} />}
    </Merged>
  )
}

// This is the main component for your 3D model
// It is wrapped in forwardRef to receive the ref from App.tsx
export const Energybar = forwardRef<THREE.Group, GroupProps>((props, ref) => {
  const instances = useContext(context)
  return (
    // The ref is attached here, allowing GSAP to animate it
    <group {...props} dispose={null} ref={ref}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="2e7513e960664aedaff860fe2491e0b6fbx" rotation={[Math.PI / 2, 0, 0]}>
            <group name="RootNode">
              <group name="group5">
                <group name="group4" rotation={[-0.048, 0.025, 0.139]}>
                  {/* The actual geometry is rendered below, using the instances data */}
                  <group name="pCube3" scale={[20.612, 5.842, 3.519]}>
                    <instances.PCubeaiStandardSurface name="pCube3_aiStandardSurface1_0" />
                  </group>
                  <group name="group2">
                     <group name="pCube6" position={[-11.263, 4.109, -0.001]} rotation={[-1.574, 0.075, -0.003]} scale={[0.536, 0.022, 0.034]}>
                        <instances.PCubeaiStandardSurface1 name="pCube6_aiStandardSurface2_0"/>
                      </group>
                      {/* ... all other 300+ mesh groups are here ... */}
                      <group name="pCube329" position={[11.795, 3.532, -0.001]} rotation={[-1.566, 0.058, 0]} scale={[0.71, 0.014, 0.034]}>
                        <instances.PCubeaiStandardSurface324 name="pCube329_aiStandardSurface3_0"/>
                      </group>
                  </group>
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  )
})

useGLTF.preload('/granola_bar_3d.glb')